c-----------------------------------------------------------------------
c  nek5000 user-file template
c
c  user specified routines:
c     - uservp  : variable properties
c     - userf   : local acceleration term for fluid
c     - userq   : local source term for scalars
c     - userbc  : boundary conditions
c     - useric  : initial conditions
c     - userchk : general purpose routine for checking errors etc.
c     - userqtl : thermal divergence for lowMach number flows 
c     - usrdat  : modify element vertices 
c     - usrdat2 : modify mesh coordinates
c     - usrdat3 : general purpose routine for initialization
c     
c-----------------------------------------------------------------------
      include "experimental/rans_komg.f"
      include "experimental/rans_wallfunctions.f"
      include "experimental/limits.f"
      include "experimental/utilities.f"
      include "experimental/lineplot.f"      
c-----------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,eg) ! set variable properties

c      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      include 'RANS_KOMG'

      integer e
      e = gllel(eg)

      Pr_t=coeffs(1)
      mu_t=rans_mut(ix,iy,iz,e)

      utrans = cpfld(ifield,2)
      if(ifield.eq.1) then
        udiff = cpfld(ifield,1)+mu_t
      elseif(ifield.eq.2) then !temperature
        udiff = cpfld(ifield,1)+mu_t*cpfld(ifield,2)/(Pr_t*cpfld(1,2))
      elseif(ifield.eq.3) then !tke
        udiff = cpfld(1,1)+rans_mutsk(ix,iy,iz,e)
      elseif(ifield.eq.4) then !tau
        udiff = cpfld(1,1)+rans_mutso(ix,iy,iz,e)
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userf(ix,iy,iz,eg) ! set acceleration term
c
c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).
c
c      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e
c     e = gllel(eg)

      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq(ix,iy,iz,eg) ! set source term

c      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e
      e = gllel(eg)

      qvol   = 0.0
      avol   = 0.0
      if(ifield.eq.3) then
        qvol = rans_kSrc(ix,iy,iz,e)
        avol = rans_kDiag(ix,iy,iz,e)
      elseif(ifield.eq.4) then
        qvol = rans_omgSrc(ix,iy,iz,e)
        avol = rans_omgDiag(ix,iy,iz,e)
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc(ix,iy,iz,iside,eg) ! set up boundary conditions
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      include 'SPLINE'
c
      real wd
      common /walldist/ wd(lx1,ly1,lz1,lelv)

      integer ix,iy,iz,iside,e,eg
      real tke_tmp,tau_tmp
      
      real upin,kpin,taupin,ypin

      integer icalld
      save icalld
      data icalld /0/

      e = gllel(eg)

      if(icalld.eq.0)then
         call getInletProf
         icalld = 1
      endif
!     Inlet from spline
      ypin = ym1(ix,iy,iz,e)+ymin_turb
      if(ypin.gt. 1.0) ypin= 1.0
      if(ypin.lt.-1.0) ypin=-1.0
      call init_prof(ypin, upin, kpin, taupin)
            
      if(cbc(iside,e,1).eq.'W  ')then
         temp = 0.0
      elseif(cbc(iside,e,1).eq.'v  ')then
         if(ifield.eq.1)then
            ux   = upin               !myuin(ix,iy,iz,e)
            uy   = 0.0
            uz   = 0.0
         elseif(ifield.eq.3)then
            temp = kpin !(ix,iy,iz,e)
         elseif(ifield.eq.4)then
            temp = taupin !(ix,iy,iz,e)
         endif
      endif
      
      call ktau_wf(ix,iy,iz,iside,e,.false.)
      
      return
      end
c-----------------------------------------------------------------------
      subroutine useric(ix,iy,iz,eg) ! set up initial conditions
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer ix,iy,iz,e,eg

      e = gllel(eg)

      ux   = 1.0
      uy   = 0.0
      uz   = 0.0
      
      if(ifield.eq.3) temp = 0.01
      if(ifield.eq.4) temp = 0.2

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk()
C      implicit none
      include 'SIZE'
      include 'TOTAL'

      common /myoutflow/ d(lx1,ly1,lz1,lelt),m1(lx1*ly1*lz1,lelt)
      real m1

      real wd,x_l,y_l,steph,ywall,stephmax
      common /walldist/ wd(lx1,ly1,lz1,lelv)
      
      real tauw,pri_x,pri_tau,r_l,coef_loc
      common /cf_tauw/ tauw(lx1,ly1,lz1,lelv)

      
      integer icalld
      save icalld
      data icalld /0/

      common /pgrads/ dpdx(lx1,ly1,lz1,lelt),dpdy(lx1,ly1,lz1,lelt),
     $     dpdz(lx1,ly1,lz1,lelt)
      real dpdx,dpdy,dpdz


      nxyz = lx1*ly1*lz1
      ntot = nxyz*nelt
      
        steph=0.1*glmax(xm1,ntot)
        stephmax=0.17*glmax(xm1,ntot)
        ywall=glmin(ym1,ntot)
        r_l=0
    
         
      if(istep.eq.nsteps)then
        call get_tauw
       do i=1,ntot
        x_l=xm1(i,1,1,1)
        y_l=ym1(i,1,1,1)
        if(x_l.gt.steph)then
         if(x_l.le.stephmax)then
          if(y_l.eq.ywall)then
            coef_loc=tauw(i,1,1,1)
           if(coef_loc.ge.0 .and. icalld.eq.0)then
            pri_x=xm1(i-1,1,1,1)
            pri_tau=tauw(i-1,1,1,1)
            r_l=x_l-(coef_loc/(coef_loc-pri_tau)*(x_l-pri_x))
             write(6,*)'Timestep:',istep,'time:',
     $        time,'r_l:', r_l 
            icalld=1
           endif
          endif
         endif
        endif
       enddo 
      endif

c     Necessary for wall functions
c     think where it can be placed instead
      call gradm1(dpdx,dpdy,dpdz,pr)
      call opcolv(dpdx,dpdy,dpdz,bm1)
      call opdssum(dpdx,dpdy,dpdz)
      call opcolv(dpdx,dpdy,dpdz,binvm1)      
      

      return
      end
c-----------------------------------------------------------------------
      subroutine userqtl ! Set thermal divergence

      call userqtl_scig 

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat()   ! This routine to modify element vertices

c      implicit none

      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2()  ! This routine to modify mesh coordinates

c      implicit none

      include 'SIZE'
      include 'TOTAL'

      real wd
      common /walldist/ wd(lx1,ly1,lz1,lelv)

      common /rans_usr/ ifld_k, ifld_omega, m_id
      integer ifld_k,ifld_omega, m_id

      integer w_id,imid,i
      real coeffs(30) !array for passing your own coeffs
      logical ifcoeffs

      real w1,w2,w3,w4,w5
      real el(lx1,ly1,lz1,lelv)
      integer iel,ifc
            
      ntot = nx1*ny1*nz1*nelt

      do i=1,ntot
         xm1(i,1,1,1) = xm1(i,1,1,1)/4.
         ym1(i,1,1,1) = ym1(i,1,1,1)/4.
      enddo

      do iel=1,nelt
      do ifc=1,2*ndim
         id_face = bc(5,ifc,iel,1)
         cbc(ifc,iel,1) = 'E  '
         cbc(ifc,iel,2) = 'E  '
         cbc(ifc,iel,3) = 'E  '
         cbc(ifc,iel,4) = 'E  '
         if (id_face.eq.31) then         ! inlet 
             cbc(ifc,iel,1) = 'v  '
             cbc(ifc,iel,2) = 't  '
             cbc(ifc,iel,3) = 't  '
             cbc(ifc,iel,4) = 't  '
         elseif (id_face.eq.32) then     ! outlet 
             cbc(ifc,iel,1) = 'O  '
             cbc(ifc,iel,2) = 'O  '
             cbc(ifc,iel,3) = 'O  '
             cbc(ifc,iel,4) = 'O  '
         elseif (id_face.eq.30) then     ! wall 
             cbc(ifc,iel,1) = 'shl'
             cbc(ifc,iel,2) = 't  '
             cbc(ifc,iel,3) = 'f  '
             cbc(ifc,iel,4) = 'f  '
          endif
      enddo
      enddo
      
      if (ifstrs) call fixmska1 (v1mask,v2mask,v3mask)
      call fixcorners('shl','W  ')
      call fixcorners('shl','A  ')

      do iel=1,nelt
      do ifc=1,2*ndim
         if (cbc(ifc,iel,1) .eq. 'W  ' .or. cbc(ifc,iel,1) .eq. 'v  ')
     $                                  cbc(ifc,iel,3) = 't  '
         if (cbc(ifc,iel,1) .eq. 'W  ' .or. cbc(ifc,iel,1) .eq. 'v  ')
     $                                  cbc(ifc,iel,4) = 't  '
c         if (cbc(ifc,iel,4) .eq. 't  ') cbc(ifc,iel,4) = 'f  '
      enddo
      enddo
            
c---------------------------------------------------------------------      
      ifld_k     = 3 !address of tke equation in t array
      ifld_omega = 4 !address of omega equation in t array
      ifcoeffs=.false. !set to true to pass your own coeffs

C     Supported models:
c      m_id = 0 !regularized standard k-omega (no wall functions)
c      m_id = 1 !regularized low-Re k-omega (no wall functions)
c      m_id = 2 !regularized standard k-omega SST (no wall functions)
c      m_id = 3 !non-regularized standard k-omega (wall functions)
      m_id = 4                  !non-regularized standard k-tau
c      m_id = 5 !non-regularized low Re k-tau 
c      m_id = 6 !non-regularized standard k-tau SST

C     Wall distance function:
c      w_id = 0                  ! user specified
c      w_id = 1 ! cheap_dist (path to wall, may work better for periodic boundaries)
      w_id = 2 ! distf (coordinate difference, provides smoother function)

c     call cheap_dist(wd,1,'W  ') 
c      call distf(wd,1,'shl',w1,w2,w3,w4,w5)
c     call distf2(wd,1,'shl','W  ',w1,w2,w3,w4,w5)

      
      call rans_init(ifld_k,ifld_omega,ifcoeffs,coeffs,w_id,wd,m_id)
      
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3()

c      implicit none

      include 'SIZE'
      include 'TOTAL'

      call count_boundaries
      
      return
      end
C-----------------------------------------------------------------------
      subroutine getInletProf

      include 'SPLINE'

      real YY(npts),ZZ(npts)

      if (nid.eq.0) then
         write(*,'(A,I4)')      'npts  = ', npts
         write(*,'(A,1pE10.2)') 'ymin = ', ymin
         write(*,'(A,1pE10.2)') 'ymax = ', ymax
         write(*,'(A,1pE10.2)') 'ymin_turb = ', ymin_turb
         write(*,'(A,1pE10.2)') 'ymax_turb = ', ymax_turb
      endif

C  Read in the 1-D profile computed by turbChan2D
C        velocity       in fU
C        kinetic energy in fK
C        omega          in fO

      open(unit=100,file='InletProf.dat',status='old')
      read(100, *)     ! skip the header
      do i=1,npts
        read(100,*)  YY(i), fU(i), fK(i), fO(i)
c        write(*,*)  YY(i), fU(i), fK(i), fO(i)
      enddo
      close(100)

C  compute spline coefficients for U
      do i=1,npts
        ZZ(i)  = fU(i)
        SYY(i) = YY(i)
      enddo
      call spline (npts, YY, ZZ, sbU, scU, sdU)

C  compute spline coefficients for T
      do i=1,npts
        ZZ(i) = fK(i)
      enddo
      call spline (npts, YY, ZZ, sbK, scK, sdK)

C  compute spline coefficients for species mass fractions
      do i=1,npts
        ZZ(i) = fO(i)
      enddo
      call spline (npts, YY, ZZ, sbO, scO, sdO)

      return
      end

c-----------------------------------------------------------------------
      subroutine spline (n, x, y, b, c, d)

c  the coefficients b(i), c(i), and d(i), i=1,2,...,n are computed
c  for a cubic interpolating spline
c
c    s(x) = y(i) + b(i)*(x-x(i)) + c(i)*(x-x(i))**2 + d(i)*(x-x(i))**3
c
c    for  x(i) .le. x .le. x(i+1)
c
c  input.. 
c
c    n = the number of data points or knots (n.ge.2)
c    x = the abscissas of the knots in strictly increasing order
c    y = the ordinates of the knots
c
c  output..
c
c    b, c, d  = arrays of spline coefficients as defined above.
c
c  using  p  to denote differentiation,
c
c    y(i) = s(x(i))
c    b(i) = sp(x(i))
c    c(i) = spp(x(i))/2
c    d(i) = sppp(x(i))/6  (derivative from the right)
c
c  the accompanying function subprogram  seval  can be used
c  to evaluate the spline.

      integer n
      real x(n), y(n), b(n), c(n), d(n)

      integer nm1, ib, i
      real t

C      do i = 1, n
C        if (nid.eq.0) write(41,'(1p2E13.5)') x(i), y(i)
C      enddo
C      if (nid.eq.0) write(41,'(A)') '&'

      nm1 = n-1
      if ( n .lt. 2 ) return
      if ( n .lt. 3 ) go to 50

c  set up tridiagonal system
c  b = diagonal, d = offdiagonal, c = right hand side.

      d(1) = x(2) - x(1)
      c(2) = (y(2) - y(1))/d(1)
      do 10 i = 2, nm1
         d(i) = x(i+1) - x(i)
         b(i) = 2.*(d(i-1) + d(i))
         c(i+1) = (y(i+1) - y(i))/d(i)
         c(i) = c(i+1) - c(i)
   10 continue

c  end conditions.  third derivatives at  x(1)  and  x(n)
c  obtained from divided differences

      b(1) = -d(1)
      b(n) = -d(n-1)
      c(1) = 0.0
      c(n) = 0.0
      if ( n .eq. 3 ) go to 15
      c(1) = c(3)/(x(4)-x(2)) - c(2)/(x(3)-x(1))
      c(n) = c(n-1)/(x(n)-x(n-2)) - c(n-2)/(x(n-1)-x(n-3))
      c(1) = c(1)*d(1)**2/(x(4)-x(1))
      c(n) = -c(n)*d(n-1)**2/(x(n)-x(n-3))

c  forward elimination

   15 do 20 i = 2, n
         t = d(i-1)/b(i-1)
         b(i) = b(i) - t*d(i-1)
         c(i) = c(i) - t*c(i-1)
   20 continue

c  back substitution

      c(n) = c(n)/b(n)
      do 30 ib = 1, nm1
         i = n-ib
         c(i) = (c(i) - d(i)*c(i+1))/b(i)
   30 continue

c  c(i) is now the sigma(i) of the text
c
c  compute polynomial coefficients

      b(n) = (y(n) - y(nm1))/d(nm1) + d(nm1)*(c(nm1) + 2.*c(n))
      do 40 i = 1, nm1
         b(i) = (y(i+1) - y(i))/d(i) - d(i)*(c(i+1) + 2.*c(i))
         d(i) = (c(i+1) - c(i))/d(i)
         c(i) = 3.*c(i)
   40 continue
      c(n) = 3.0*c(n)
      d(n) = d(n-1)
      return

   50 b(1) = (y(2)-y(1))/(x(2)-x(1))
      c(1) = 0.0
      d(1) = 0.0
      b(2) = b(1)
      c(2) = 0.0
      d(2) = 0.0

      return
      end
c---------------------------------------------------------------------
      subroutine init_prof(y,Uin,Kin,Oin)
c
c Compute temperature + species using cubic splines
c   f(y) = s(i) + sb(i)*(y-SYY(i)) + sc(i)*(y-SYY(i))**2 + sd(i)*(y-SYY(i))**3

      include 'SPLINE'

      real y, Uin, Kin, Oin

      ii = 0
      do i=1,npts-1
        if (y.ge.SYY(i) .and. y.lt.SYY(i+1)) ii=i
      enddo
      if(abs(y-SYY(npts)).lt.1e-7) ii=npts

      if (ii.le.0) then
        write(*,*) 'Error in init_mean: ii= ', ii,'>npts=', npts, y
        call exitt
      endif

      Uin=fU(ii) + sbU(ii)*(y-SYY(ii))
     *     +scU(ii)*(y-SYY(ii))**2+sdU(ii)*(y-SYY(ii))**3

      if (y.ge.SYY(npts)) Uin=fU(npts)

      Kin=fK(ii) + sbK(ii)*(y-SYY(ii))
     *     +scK(ii)*(y-SYY(ii))**2+sdK(ii)*(y-SYY(ii))**3

      if (y.ge.SYY(npts)) Kin=fK(npts)

      Oin=fO(ii) + sbO(ii)*(y-SYY(ii))
     *     +scO(ii)*(y-SYY(ii))**2+sdO(ii)*(y-SYY(ii))**3

      if (y.ge.SYY(npts)) Oin=fO(npts)

      return
      end
c---------------------------------------------------------------------
      subroutine get_tauw
      include 'SIZE'
      include 'TOTAL'

      real tauw
      common /cf_tauw/ tauw(lx1,ly1,lz1,lelv)
      
      integer e
      real gradu(lx1*ly1*lz1,3,3)
      real norm(3),nu,tau(3)
      logical ifgrad,ifdid
      real msk(lx1,ly1,lz1,lelv)
      save msk

      data ifdid /.false./
      save ifdid, msk

C     do some initializations once
      if(.not.ifdid)then
         ifdid = .true.
         call rone(msk,nx1*ny1*nz1*nelv) ! need to look at it more closely)
         do e=1,nelv
            do isd=1,2*ndim
               if(cbc(isd,e,1).eq.'W  '.or.cbc(isd,e,1).eq.'shl') then
                  call backpts(i0,i1,j0,j1,k0,k1,isd)
                  do k=k0,k1
                     do j=j0,j1
                        do i=i0,i1
                           msk(i,j,k,e)=0.0
                        enddo
                     enddo
                  enddo
               endif
            enddo
            do isd=1,2*ndim
               if(cbc(isd,e,1).eq.'W  '.or.cbc(isd,e,1).eq.'shl') then
                  call facind(i0,i1,j0,j1,k0,k1,lx1,ly1,lz1,isd)
                  do k=k0,k1
                     do j=j0,j1
                        do i=i0,i1
                           msk(i,j,k,e)=1.0
                        enddo
                     enddo
                  enddo
               endif
            enddo
         enddo
         call dssum(msk,nx1,ny1,nz1) 
      endif

      do e = 1,nelv
         ifgrad = .true.
         do isd=1,2*ndim
            if(cbc(isd,e,1).eq.'W  '.or.cbc(isd,e,1).eq.'shl')then
               if(ifgrad)then
                  call gradm11(gradu(1,1,1),gradu(1,1,2),gradu(1,1,3),
     $                 vx,e)
                  call gradm11(gradu(1,2,1),gradu(1,2,2),gradu(1,2,3),
     $                 vy,e)
                  if(if3d)
     &                 call gradm11(gradu(1,3,1),gradu(1,3,2),
     $                 gradu(1,3,3),vz,e)
                  ifgrad=.false.
               endif
               call backpts(i0,i1,j0,j1,k0,k1,isd)
               do k=k0,k1
                  do j=j0,j1
                     do i=i0,i1
                        if(msk(i,j,k,e).lt.0.5) then
                           iw=i
                           jw=j
                           kw=k
                           if    (isd.eq.1) then
                              jw=1
                           elseif(isd.eq.2) then
                              iw=nx1
                           elseif(isd.eq.3) then
                              jw=ny1
                           elseif(isd.eq.4) then
                              iw=1
                           elseif(isd.eq.5) then
                              kw=1
                           else
                              kw=nx1
                           endif
                           call getSnormal(norm,iw,jw,kw,isd,e)
                           nu = vdiff(iw,jw,kw,e,1)/vtrans(iw,jw,kw,e,1)
                           ipt=i +(j -1)*nx1+(k -1)*nx1*ny1
                           wpt=iw+(jw-1)*nx1+(kw-1)*nx1*ny1
                           
                           do i2=1,ldim
                              tau(i2)=0.0
                              do j2=1,ldim
                                 tau(i2)=tau(i2)+
     &                                nu*(gradu(wpt,i2,j2)+
     $                                gradu(wpt,j2,i2))*norm(j2)
                              enddo
                           enddo

                           vsca=0.0
                           do i2=1,ldim
                              vsca=vsca+tau(i2)*norm(i2)
                           enddo
                           
                           tautemp=0.0
                           do i2=1,ldim
                              tautemp=tautemp+(tau(i2)-vsca*norm(i2))
                           enddo
                           tauw(iw,jw,kw,e)=-(tau(1)-vsca*norm(1)) !sqrt(tautemp)
                        endif
                     enddo
                  enddo
               enddo
            endif
         enddo
      enddo
      return
      end
c---------------------------------------------------------------------
