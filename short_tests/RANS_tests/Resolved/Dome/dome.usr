c-----------------------------------------------------------------------
c  nek5000 user-file template
c
c  user specified routines:
c     - uservp  : variable properties
c     - userf   : local acceleration term for fluid
c     - userq   : local source term for scalars
c     - userbc  : boundary conditions
c     - useric  : initial conditions
c     - userchk : general purpose routine for checking errors etc.
c     - userqtl : thermal divergence for lowMach number flows 
c     - usrdat  : modify element vertices 
c     - usrdat2 : modify mesh coordinates
c     - usrdat3 : general purpose routine for initialization
c     
c-----------------------------------------------------------------------
      include "experimental/rans_komg.f"
      include "experimental/rans_wallfunctions.f"
      include "experimental/utilities.f"
      include "experimental/limits.f"
      include "experimental/lineplot.f"
c-----------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,eg) ! set variable properties

      !implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      include 'RANS_KOMG'

      integer e
      e = gllel(eg)

      Pr_t=coeffs(1)
      mu_t=rans_mut(ix,iy,iz,e)

      utrans = cpfld(ifield,2)
      if(ifield.eq.1) then
        udiff = cpfld(ifield,1)+mu_t
      elseif(ifield.eq.2) then !temperature
        udiff = cpfld(ifield,1)+mu_t*cpfld(ifield,2)/(Pr_t*cpfld(1,2))
      elseif(ifield.eq.3) then !tke
        udiff = cpfld(1,1)+rans_mutsk(ix,iy,iz,e)
      elseif(ifield.eq.4) then !tau
        udiff = cpfld(1,1)+rans_mutso(ix,iy,iz,e)
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userf(ix,iy,iz,eg) ! set acceleration term
c
c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).
c
c      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e
c     e = gllel(eg)

      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq(ix,iy,iz,eg) ! set source term

c      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e
      e = gllel(eg)

      qvol   = 0.0
      avol   = 0.0
      if(ifield.eq.3) then
        qvol = rans_kSrc(ix,iy,iz,e)
        avol = rans_kDiag(ix,iy,iz,e)
      elseif(ifield.eq.4) then
        qvol = rans_omgSrc(ix,iy,iz,e)
        avol = rans_omgDiag(ix,iy,iz,e)
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc(ix,iy,iz,iside,eg) ! set up boundary conditions
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
c
      real wd
      common /walldist/ wd(lx1,ly1,lz1,lelv)

      integer ix,iy,iz,iside,e,eg
      real Re,darcy,utau,sigk,kmax,yplus,yk,wd_temp,tke,tau,rr
      character*3 cb3

      e = gllel(eg)

      cb3=cbc(iside,e,1)

      rr = y/0.5

      ux   = -(8.0/7.0)*(1.0-rr)**(1.0/7.0)
      uy   = 0.0
      uz   = 0.0
      temp = 0.0

      if(cb3.ne.'W  ') then

        Re = 1.0/param(2)
        darcy = 0.316/(Re**0.25)
        utau = sqrt(darcy/8.0)
        sigk = 0.6
        kmax = 2.5*utau*utau
        wd_temp = (0.5 - y)*2.0
        yplus = max(wd_temp*utau*Re,1.0e-6)
        yk=30.0

        tke=kmax*exp(-(log10(yplus/yk))**2.0/(2.0*sigk**2))
        tau=yplus/(10.0*utau*utau*Re)

        if(ifield.eq.3) temp = tke
        if(ifield.eq.4) temp = tau
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine useric(ix,iy,iz,eg) ! set up initial conditions
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer ix,iy,iz,e,eg

      real wd
      common /walldist/ wd(lx1,ly1,lz1,lelv)

      real rr,dd

      rr = y/0.5

      e = gllel(eg)

      ux=1.0e-3
      uy=0.0
      uz=0.0
      if(ifield.eq.3) temp = 0.001
      if(ifield.eq.4) temp = 2.*0.01*cpfld(1,1)/0.001 !0.2
      
c     if(y.gt.0.5001.or.x.lt.0.01) then

c       dd = wd(ix,iy,iz,e)
c       uy   = 0.0
c       ux   = 0.001
c       if (y.lt.0.5) then
c         if (x.gt.5.0) then
c      	    ux   = -(8.0/7.0)*(1.0-rr)**(1.0/7.0)
c         endif
c       endif
c       uz   = 0.0

c       if(ifield.eq.3) temp = 0.01
c       if(ifield.eq.4) temp = 0.5*dd

c     endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk()
      
      !implicit none
      
      include 'SIZE'
      include 'TOTAL'

      ! distance to wall
      real wd
      common /walldist/ wd(lx1,ly1,lz1,lelv)

      real norm(3)
      real pt(3),pta(3),ptb(3)

      ! print limits
      if(mod(istep,100).eq.0) then
        call print_limits
        call y_p_limits(wd,.true.)

        norm(1) = 1.0
        norm(2) = 0.0
        norm(3) = 0.0
        pt(1) = 15.0
        pt(2) = 0.0
        pt(3) = 0.0
        eps = 0.1
        umean = planar_ave_m1(vx,norm,pt,eps)
        if(nio.eq.0)write(*,*)"umean:",umean
      endif

      if(istep.eq.nsteps)then
        pta(1) = -1.0
        pta(2) = 0.0
        pta(3) = 0.0
        ptb(1) = -1.0
        ptb(2) = 2.0
        ptb(3) = 0.0
        call lineplot(pta,ptb,1001)

        pta(1) = -2.0
        pta(2) = 0.0
        pta(3) = 0.0
        ptb(1) = -2.0
        ptb(2) = 2.0
        ptb(3) = 0.0
        call lineplot(pta,ptb,1001)

        pta(1) = -3.0
        pta(2) = 0.0
        pta(3) = 0.0
        ptb(1) = -3.0
        ptb(2) = 2.0
        ptb(3) = 0.0
        call lineplot(pta,ptb,1001)

        pta(1) = -4.0
        pta(2) = 0.0
        pta(3) = 0.0
        ptb(1) = -4.0
        ptb(2) = 2.0
        ptb(3) = 0.0
        call lineplot(pta,ptb,1001)

        pta(1) = -5.0
        pta(2) = 0.0
        pta(3) = 0.0
        ptb(1) = -5.0
        ptb(2) = 2.0
        ptb(3) = 0.0
        call lineplot(pta,ptb,1001)

        pta(1) = -6.0
        pta(2) = 0.0
        pta(3) = 0.0
        ptb(1) = -6.0
        ptb(2) = 2.0
        ptb(3) = 0.0
        call lineplot(pta,ptb,1001)

        pta(1) = -7.0
        pta(2) = 0.0
        pta(3) = 0.0
        ptb(1) = -7.0
        ptb(2) = 2.0
        ptb(3) = 0.0
        call lineplot(pta,ptb,1001)

        pta(1) = -8.0
        pta(2) = 0.0
        pta(3) = 0.0
        ptb(1) = -8.0
        ptb(2) = 2.0
        ptb(3) = 0.0
        call lineplot(pta,ptb,1001)
      endif
      !turbulent outflow bc
      !rq  = 4.
      !uin = 0.
      !call turb_outflow(d,m1,rq,uin)

      return
  
      end
c-----------------------------------------------------------------------
      subroutine userqtl ! Set thermal divergence

      call userqtl_scig 

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat()   ! This routine to modify element vertices

c      implicit none

      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2()  ! This routine to modify mesh coordinates

c      implicit none

      include 'SIZE'
      include 'TOTAL'

      integer iel, ifc, id_face
      integer i, e, f, n
      real dhi
      real wd(lx1,ly1,lz1,lelv)
      common /walldist/ wd

      logical ifcoefs

      common /SCRNS/
     & w1(lx1*ly1*lz1*lelv)
     &,w2(lx1*ly1*lz1*lelv)
     &,w3(lx1*ly1*lz1*lelv)
     &,w4(lx1*ly1*lz1*lelv)
     &,w5(lx1*ly1*lz1*lelv)


      ntot = nx1*ny1*nz1*nelt

      n = lx1*ly1*lz1*nelv

!     diameter of the inlet pipe is 19.05 mm
      do i=1,n
        xm1(i,1,1,1)=xm1(i,1,1,1)/19.05
        ym1(i,1,1,1)=ym1(i,1,1,1)/19.05
        zm1(i,1,1,1)=zm1(i,1,1,1)/19.05
      enddo

      do iel=1,nelt
         do ifc=1,2*ndim
            id_face = bc(5,ifc,iel,1)
            if (id_face.eq.1) then ! inlet
               cbc(ifc,iel,1) = 'v  '
               cbc(ifc,iel,2) = 't  '
               cbc(ifc,iel,3) = 't  '
               cbc(ifc,iel,4) = 't  '
            elseif (id_face.eq.2) then ! outlet
               cbc(ifc,iel,1) = 'O  '
               cbc(ifc,iel,2) = 'I  '
               cbc(ifc,iel,3) = 'I  '
               cbc(ifc,iel,4) = 'I  '
            elseif (id_face.eq.3) then ! wall
               cbc(ifc,iel,1) = 'W  '
               cbc(ifc,iel,2) = 't  '
               cbc(ifc,iel,3) = 't  '
               cbc(ifc,iel,4) = 't  '
            elseif (id_face.eq.4) then ! centerline (axisymmetric)
               cbc(ifc,iel,1) = 'A  '
               cbc(ifc,iel,2) = 'A  '
               cbc(ifc,iel,3) = 'A  '
               cbc(ifc,iel,4) = 'A  '
            endif
         enddo
      enddo

C     initialize the RANS model
      ifld_k = 3 !address of tke
      ifld_t = 4 !address of tau
      ifcoefs = .false.
      ifrans_diag = .true.
      
C     Supported models:
c     id_m = 0 !regularized high-Re k-omega (no wall functions)
c     id_m = 1 !regularized low-Re k-omega
c     id_m = 2 !regularized high-Re k-omega SST (no wall functions)
c     id_m = 3 !regularized low-Re k-omega SST
      id_m = 4 !standard k-tau

C     Wall distance function:
c     id_w = 0 ! user specified
c     id_w = 1 ! cheap_dist (path to wall, may work better for periodic boundaries)
      id_w = 2 ! distf (coordinate difference, provides smoother function)
      
      call rans_init(ifld_k,ifld_t,ifcoefs,coefs,id_w,wd,id_m)
 
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3()

c      implicit none

      include 'SIZE'
      include 'TOTAL'

c      call count_boundaries

      return
      end
c-----------------------------------------------------------------------	  
